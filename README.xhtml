<?xml version='1.0' encoding='UTF-8'?>

<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.1//EN' 'http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd'>

<html xmlns='http://www.w3.org/1999/xhtml' xml:lang='en'>
  <head>
    <title>Geordi Readme</title>
  </head>
  <body>

    <h1>Geordi Readme</h1>

    <hr/><h2>Table of Contents</h2>

    <ul>
      <li><a href='#installation'>1. Installation</a></li>
      <li><a href='#locally'>2. Running geordi locally</a></li>
      <li><a href='#ircbot'>3. Running a geordi IRC bot</a></li>
      <li><a href='#problems'>4. Known problems</a></li>
    </ul>
    <ul>
      <li><a href='#exampletree'>Appendix A: Example rt tree</a></li>
      <li><a href='#examplelisting'>Appendix B: Example rt file listing</a></li>
    </ul>

    <hr/><h2><a id='installation'/>1. Installation</h2>
    <p>
      Geordi is not "<kbd>./configure &amp;&amp; make &amp;&amp; make install</kbd>" software. Setting up geordi is a somewhat awkward manual task, mainly because there are some installation steps that would be very hard to automate.
    </p>

    <h3>Prerequisites</h3>
    <ul>
      <li>An x86-32 or x86-64 machine</li>
      <li>GNU/Linux &ge; 2.6.10</li>
      <li>GCC/G++ &ge; 4</li>
      <li><a href='http://www.boost.org/'>Boost</a> &ge; 1.33 (Not strictly needed for the operation of geordi itself, but many prelude parts use Boost headers. Link libraries are not needed.)</li>
      <li><a href='http://www.haskell.org/ghc/'>GHC</a> &ge; 6.6.1</li>
      <li><a href='http://hackage.haskell.org/cgi-bin/hackage-scripts/package/utf8-string-0.1'>utf8-string</a> &ge; 0.1</li>
      <li><a href='http://hackage.haskell.org/cgi-bin/hackage-scripts/package/irc-0.2.3'>irc</a> 0.2.3</li>
    </ul>
    <p>These last two are GHC packages. For those of us not familiar with GHC packages, to install these do:</p>
    <p>
      <kbd>
        tar xf utf8-string-0.1.tar.gz<br/>
        cd utf8-string-0.1<br/>
        runhaskell Setup.lhs configure<br/>
        runhaskell Setup.lhs build<br/>
        su -c "runhaskell Setup.lhs install"
      </kbd>
    </p>
    <p>(And likewise for the irc package.)</p>

    <h3>Optional step for improved error messages</h3>
    <p>
      Do <kbd>grep get_max_length /usr/include/c++/4.3.0/debug/formatter.h</kbd> (corrected for your system, of course). If you don't get output, it means that your gcc version does not yet have configurable libstdc++ debug mode error formatter line width, which means that you should do the following manually: in that file, find the value 78, and change it into 780.
    </p>
    <p>
      (See <a href='http://gcc.gnu.org/bugzilla/show_bug.cgi?id=31518'>GCC bug 31518</a> for more information.)
    </p>

    <h3>Installation procedure</h3>
    <p>
      The following is a list of steps needed to set up the environment geordi runs in. Don't copy/paste this into your terminal, this is not a shell script! It is intended to be read and interpreted by a human.
    </p>
    <p>
      Assuming you have cd'd into the "geordi" directory obtained through darcs (or extracted from a snapshot), do the following:
    </p>
    <ol>
      <li><kbd>chmod +x scripts/*</kbd> &nbsp; # darcs is not yet aware of executability</li>
      <li><kbd>scripts/compile</kbd> &nbsp; # To produce the ./Bot, ./Local, and ./Testsuite executables.</li>
      <li>Edit `jail-config' and `compile-config' to your liking. Important: check that the g++ path refers to the actual g++ binary, not some wrapper that adds output coloring or something.</li>
      <li><kbd>mkdir rt</kbd> &nbsp; # This will be our chroot root.</li>
      <li><kbd>scripts/compile-prelude</kbd> &nbsp; # To produce rt/prelude.h.gch and rt/prelude.a.</li>
      <li><kbd>cp prelude/terse.hpp rt/</kbd></li>
      <li><kbd>rtcp () { cp -L -r -v --parents $@ rt ; }</kbd> &nbsp; # This defines a shell function <kbd>rtcp</kbd> that makes copying stuff into rt more convenient.</li>
      <li><kbd>libs () { ldd $@ | runhaskell scripts/parse-ldd-output.hs ; }</kbd> &nbsp; # This defines a shell function <kbd>libs</kbd> that lets us easily query library file dependencies.</li>
      <li><kbd>EXECS="`which g++ as ld` /usr/lib/gcc/i586-suse-linux/4.1.2/cc1plus"</kbd> &nbsp; # Correct the last one for your system.</li>
      <li><kbd>rtcp $EXECS `libs $EXECS`</kbd> &nbsp; # This copies the executables and their library dependencies into rt.</li>
      <li><kbd>sudo scripts/trycompile</kbd> &nbsp; # This will keep giving errors about missing .o files and libraries. Copy those into rt using rtcp until rt/t is produced successfully. If, while doing this, you decide (out of sheer desperation) at some point to just copy entire gcc directories into rt (which in itself is not completely unreasonable), make sure that there is no collect2 binary in rt (it confuses geordi).</li>
      <li><kbd>rtcp `libs rt/t`</kbd></li>
      <li><kbd>sudo chroot rt /t &amp;&amp; echo</kbd> # This may complain a bit more about missing libraries, which again should be copied into rt using rtcp. Eventually, it should print "9".</li>
      <li><kbd>scripts/perms</kbd> &nbsp; # To set up proper permissions for rt and selected files in it.</li>
      <li><kbd>find rt -perm -o+w</kbd> &nbsp; # This should list exactly four files: rt/t.o, rt/t.s, rt/t.cpp, and rt/t.</li>
      <li><kbd>find rt -user nobody</kbd> &nbsp; # This should find nothing.</li>
      <li><kbd>find rt -perm -4000</kbd> &nbsp; # This should find nothing either.</li>
      <li><kbd>sudo ./Local "&lt;&lt; 'x'"</kbd> &nbsp; # If this does not print 'x', something's wrong.</li>
      <li>To get an idea of what rt could look like, look at the <a href='#exampletree'>example rt tree</a> and the <a href='#examplelisting'>example rt file list</a>.</li>
      <li>A modest testsuite can now be run with <kbd>sudo ./Testsuite</kbd> (recommended).</li>
    </ol>

    <hr/><h2><a id='locally'>2. Running geordi locally</a></h2>
    <p><kbd>Local</kbd> lets one test snippets locally (that is, without connecting to any IRC server).</p>
    <p>Usage:&emsp;<kbd>sudo ./Local [option]... [request]...</kbd></p>
    <p>Request syntax is described in the <a href='http://www.eelis.net/geordi/#usage'>manual</a>, except that here the nickname (and colon/comma) must be omitted.</p>
    <p>Options:</p>
    <dl>
      <dt><kbd>-h</kbd> / <kbd>--help</kbd></dt>
      <dd><p>Display help and exit.</p></dd>
    </dl>
    <p>If any requests are specified, they are evaluated and their results are shown. If the first request starts with a request option, interject “<kbd>--</kbd>” to prevent it from being interpreted as a command option.</p>
    <p>If no requests are specified, the program goes into a Read-Eval-Print-Loop. To get nice command line editing and history in this mode, use something like <a href='http://utopia.knoware.nl/~hlub/rlwrap/'>rlwrap</a> (with it, the command becomes <kbd>sudo rlwrap ./Local</kbd>).</p>

    <hr/><h2><a id='ircbot'>3. Running a geordi IRC bot</a></h2>

    <p>Usage:&emsp;<kbd>sudo ./Bot [option]...</kbd></p>

    <p>Options:</p>

    <dl>
      <dt><kbd>-c &lt;file></kbd> / <kbd>--config &lt;file></kbd></dt>
      <dd><p>Load bot configuration from &lt;file> instead of "bot-config".</p></dd>
      <dt><kbd>-h</kbd> / <kbd>--help</kbd></dt>
      <dd><p>Display help and exit.</p></dd>
    </dl>

    <h3>Regarding the need for root permissions</h3>

    <p>Starting an IRC bot with root permissions should make one seriously nervous. Geordi requires root permissions only because <a href='http://linux.die.net/man/2/chroot'>chroot(2)</a> does. Geordi chroots into rt as one of the first things it does on startup, and changes to the user and group specified in bot-config before it starts responding to IRC messages.</p>

    <h3><a id='nickserv'>NickServ identification</a></h3>

    <p>To have the bot identify to NickServ, change the following line in config:</p>
    <p><code>, nick_pass = Nothing</code></p>
    <p>into:</p>
    <p><code>, nick_pass = Just "mypassword"</code></p>

    <h3><a id='reconnect'>Auto-reconnect</a></h3>

    <p>Geordi does not auto-reconnect. For that, just use something like <kbd>while true; do ./Bot; sleep 120; done</kbd></p>

    <h3><a id='multinetwork'>Connecting to multiple networks</a></h3>

    <p>Make config files for the different networks. Then run one geordi instance for each network, passing -c arguments pointing to the respective config files. The rt directory will be safely shared.</p>

    <hr/><h2><a id='problems'/>4. Known problems</h2>
    <ul>
      <li>
        Because <kbd>Bot</kbd> connects as root, IRC servers that query ident may get a root response and may decide to reject the connection. (Quakenet is known to do this.)
      </li>
    </ul>

    <hr/><h2><a id='exampletree'/>Appendix A: Example rt tree</h2>
    <pre>
      rt
      |-- lib64
      |   |-- ld-linux-x86-64.so.2
      |   |-- libc.so.6
      |   `-- libgcc_s.so.1
      |-- lock
      |-- prelude.a
      |-- prelude.h.gch
      |-- t
      |-- t.cpp
      |-- t.o
      |-- t.s
      |-- terse.hpp
      `-- usr
          |-- bin
          |   |-- as
          |   |-- g++
          |   `-- ld
          `-- lib64
              |-- crt1.o
              |-- crti.o
              |-- crtn.o
              |-- gcc
              |   `-- x86_64-suse-linux
              |       `-- 4.1.2
              |           |-- cc1plus
              |           |-- crtbegin.o
              |           |-- crtend.o
              |           |-- libgcc.a
              |           |-- libgcc_s.so
              |           `-- libstdc++.a
              |-- libbfd-2.17.50.0.5.so
              |-- libc.a
              |-- libc.so
              |-- libc_nonshared.a
              |-- libm.a
              `-- libmcheck.a
    </pre>

    <hr/><h2><a id='examplelisting'/>Appendix B: Example rt file listing</h2>
    <pre>
      rt:
      total 74M
      drwxr-xr-x 2 eelis users  152 2007-12-13 16:53 lib64
      -rw-r--r-- 1 eelis users    0 2007-12-13 16:53 lock
      -rw-r--r-- 1 eelis users  66K 2007-12-13 16:47 prelude.a
      -rw-r--r-- 1 eelis users  73M 2007-12-13 16:48 prelude.h.gch
      -rwxrwxrwx 1 eelis users 726K 2007-12-13 16:53 t
      -rw-rw-rw- 1 eelis users   61 2007-12-13 16:53 t.cpp
      -rwxr-xr-x 1 eelis users 1.3K 2007-12-13 16:48 terse.hpp
      -rw-rw-rw- 1 eelis users  39K 2007-12-13 16:53 t.o
      -rw-rw-rw- 1 eelis users  87K 2007-12-13 16:53 t.s
      drwxr-xr-x 4 eelis users   96 2007-12-13 16:48 usr

      rt/lib64:
      total 1.8M
      -rwxr-xr-x 1 eelis users 139K 2007-12-13 16:48 ld-linux-x86-64.so.2
      -rwxr-xr-x 1 eelis users 1.6M 2007-12-13 16:48 libc.so.6
      -rwxr-xr-x 1 eelis users  59K 2007-12-13 16:53 libgcc_s.so.1

      rt/usr:
      total 0
      drwxr-xr-x 2 eelis users 120 2007-12-13 16:48 bin
      drwxr-xr-x 3 eelis users 320 2007-12-13 16:52 lib64

      rt/usr/bin:
      total 2.3M
      -rwxr-xr-x 1 eelis users 343K 2007-12-13 16:48 as
      -rwxr-xr-x 1 eelis users 139K 2007-12-13 16:48 g++
      -rwxr-xr-x 1 eelis users 1.9M 2007-12-13 16:48 ld

      rt/usr/lib64:
      total 6.8M
      -rw-r--r-- 1 eelis users 3.5K 2007-12-13 16:48 crt1.o
      -rw-r--r-- 1 eelis users 3.2K 2007-12-13 16:49 crti.o
      -rw-r--r-- 1 eelis users 2.7K 2007-12-13 16:52 crtn.o
      drwxr-xr-x 3 eelis users   88 2007-12-13 16:48 gcc
      -rwxr-xr-x 1 eelis users 1.7M 2007-12-13 16:48 libbfd-2.17.50.0.5.so
      -rw-r--r-- 1 eelis users 4.0M 2007-12-13 16:50 libc.a
      -rw-r--r-- 1 eelis users  21K 2007-12-13 16:51 libc_nonshared.a
      -rw-r--r-- 1 eelis users  253 2007-12-13 16:50 libc.so
      -rw-r--r-- 1 eelis users 1.1M 2007-12-13 16:50 libm.a
      -rw-r--r-- 1 eelis users 1.6K 2007-12-13 16:50 libmcheck.a

      rt/usr/lib64/gcc:
      total 0
      drwxr-xr-x 3 eelis users 72 2007-12-13 16:48 x86_64-suse-linux

      rt/usr/lib64/gcc/x86_64-suse-linux:
      total 0
      drwxr-xr-x 2 eelis users 216 2007-12-13 16:50 4.1.2

      rt/usr/lib64/gcc/x86_64-suse-linux/4.1.2:
      total 8.6M
      -rwxr-xr-x 1 eelis users 5.9M 2007-12-13 16:48 cc1plus
      -rw-r--r-- 1 eelis users 2.4K 2007-12-13 16:49 crtbegin.o
      -rw-r--r-- 1 eelis users 1.9K 2007-12-13 16:49 crtend.o
      -rw-r--r-- 1 eelis users 113K 2007-12-13 16:50 libgcc.a
      -rwxr-xr-x 1 eelis users  59K 2007-12-13 16:53 libgcc_s.so
      -rw-r--r-- 1 eelis users 2.6M 2007-12-13 16:50 libstdc++.a
    </pre>
  </body>
</html>
