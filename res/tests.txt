{string t,u,y(1,34);stringstream i("geordi{string t,u,y(1,34);stringstream i(!);getline(i,t,'!')>>u;cout<<t<<y<<i.str()<<y<<u;}");getline(i,t,'!')>>u;cout<<t<<y<<i.str()<<y<<u;} // Iostreams quine.
<< 3
int main;
{ for(;;); }
{ assert(4 > 9); }
{ int i = 0; while (new (nothrow) char [1024 * 1024]) ++i; cout << i << " MiB"; } // Memory exhaustion.
extern "C" int open (char const *, int); int main () { int i = 0; while (open(__FILE__, 0) != -1) ++i; cout << del << strerror(errno) << i; } // File handle exhaustion.
{ ofstream f (__FILE__); string meg (1024 * 1024, 'x'); for (;;) { f << meg << flush; cout << "+ " << flush; } } // File size limit.
{ int x = 0; cout << 3 / x; }
<< fork()
{ vector<int> s (3); cout << *(s.begin() + 4); } // libstdc++ debug mode diagnostics.
{ int * p = new int [3]; p[3] = 6; delete[] p; } // glibc heap consistency checking.
{ int * p = new int [3]; p[-1] = 6; delete[] p; } // Ditto.
{ int * p = new int [3]; delete[] p; delete[] p; } // Ditto.
char program[]=">>,[>>,]<<[[-<+<]>[>[>>]<[.[-]<[[>>+<<-]<]>>]>]<<]",input[]="dicekjhbagfl", *i=input,m[512]={},*p=m;void b(char*c){for(;*c&&*c!=']';++c){(*((p+=*c=='>')-=*c=='<')+=*c=='+') -=*c=='-';*c=='.'&&cout<<*p;if(*c==',')*p=*i++;if(*c=='['){for(++c;*p;)b(c);for(int d=0;*c!=']'||d--;++c)d+=*c=='[';}}}int main(){b(program);} // Brainfuck interpreter.
-c #include __FILE__ // cc1plus timeout.
<< showbase << uppercase << bin << setfill('_') << internal << setw(10) << 53
<< ETYPE(&vector<map<string, istream_iterator<int> > >::data) // cc1plus error filter test.
{ istringstream is; !is.str(); } // Ditto.
{ using tracked::B; vector<B> v; v.push_back(B()); }
<< 'a' << char(144) << 'b' << char(215) << char(144) << 'c'
{ char c [] = "Hello world!"; for (int i = 3; i != 500; ++i) write(i, c, sizeof(c)); }
<< advice()
extern "C" char const s [] = "Hello world!"; int main () { asm("push $12; push $s; push $1; call write; pop %eax; pop %eax; pop %eax"); } // i386 assembly.
extern "C" char const s [] = "Hello world!"; int main () { asm("movl $12, %edx; movl $s, %esi; movl $1, %edi; call write"); } // x86_64 assembly.
{ assert(string("warp").length() == 4); }
extern "C" int chmod (char const *, int); int main () { errno = 0; chmod(__FILE__, 0); cout << strerror(errno); } // Ignored system call.
{ asm("movl $3, $3"); } // as error filter test.
